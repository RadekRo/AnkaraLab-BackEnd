// <auto-generated />
using AnkaraLab_BackEnd.WebAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnkaraLab_BackEnd.WebAPI.Migrations
{
    [DbContext(typeof(AnkaraLabDbContext))]
    [Migration("20231101213926_OrderId_column_corrected")]
    partial class OrderId_column_corrected
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnkaraLab_BackEnd.WebAPI.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Odbitka fotograficzna z procesu fotochemicznego",
                            Name = "Odbitka"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Wydruk atramentowy wysokiej jakości",
                            Name = "Wydruk wielkoformatowy"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Gadżety z plików cyfrowych",
                            Name = "Gadżety"
                        });
                });

            modelBuilder.Entity("AnkaraLab_BackEnd.WebAPI.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InvoiceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryAddress = "Polna 10",
                            InvoiceAddress = "Rolnicza 12",
                            PaymentMethod = "Blik",
                            PaymentStatus = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            DeliveryAddress = "Stara 210",
                            InvoiceAddress = "Woronicza 121",
                            PaymentMethod = "PayU",
                            PaymentStatus = "Failed"
                        });
                });

            modelBuilder.Entity("AnkaraLab_BackEnd.WebAPI.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Deadline")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsAvaliable")
                        .HasColumnType("bit");

                    b.Property<int>("PhotoHeight")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<int>("PhotoWidth")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Deadline = 1,
                            Description = "Odbitka fotograficzna w formaciw 10x15",
                            IsAvaliable = true,
                            PhotoHeight = 102,
                            PhotoWidth = 152,
                            Price = 0.90000000000000002,
                            Size = "10x15"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Deadline = 1,
                            Description = "Odbitka fotograficzna w formacie 15x21",
                            IsAvaliable = true,
                            PhotoHeight = 152,
                            PhotoWidth = 210,
                            Price = 2.0,
                            Size = "15x21"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Deadline = 3,
                            Description = "Fotokula śnieżna",
                            IsAvaliable = true,
                            PhotoHeight = 100,
                            PhotoWidth = 100,
                            Price = 25.0,
                            Size = "10x10"
                        });
                });

            modelBuilder.Entity("AnkaraLab_BackEnd.WebAPI.Domain.Product", b =>
                {
                    b.HasOne("AnkaraLab_BackEnd.WebAPI.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
